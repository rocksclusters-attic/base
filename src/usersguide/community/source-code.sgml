<section id="source-access" xreflabel="Access to Rocks Source Code">
<title> Access to Rocks Source Code </title>

<para>
The source code for Rocks is available from a public read-only <ulink url="http://git-scm.com/">GIT</ulink> repository.  
As of Rocks 5.7 GIT (git) is installed on your frontend machine, for older version of Rocks (or non-Rocks platforms) you will need to install the Git package yourself.
You can download rpm packages from the EPEL Red Hat web site at <ulink url="http://dl.fedoraproject.org/pub/epel/5/x86_64/repoview/git.html">http://dl.fedoraproject.org/pub/epel/5/x86_64/repoview/git.html</ulink>
</para>

<para>
Git is a a distributed source control system.  
Several tutorials are provided on the GIT web site <ulink url="http://git-scm.com/documentation">http://git-scm.com/documentation</ulink>.
Fundamentally, distributed source control turns your checked out source code from a read-only copy into a repository and then grants read-write access to others based on your checked out repository.
In the context of Rocks this means individual Roll developers can independently control who has access to their code.
</para>

<para>
You can use the Github Web interface to view the source code using your browser
at <ulink
url="https://github.com/rocksclusters/">https://github.com/rocksclusters/</ulink>.

Each Roll has its own repository named after the Roll. So if you need to checkout
the Base roll you should checkout the repository called base under the Rocks Github
web page (in this example <ulink url="https://github.com/rocksclusters/base">
https://github.com/rocksclusters/base</ulink>)

To check out the current source code you will first need to clone one of the
read-only repository listed on the main web page of the Github web site. This
operation can take several minutes to complete.
</para>

<screen>
 $ git clone http://github.com/rocksclusters/base;
Cloning into 'base'...
 $ cd base
 $ git status
# On branch master
nothing to commit (working directory clean)
 $ vi DESCRIPTION 
 $ git status
# On branch master
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#	modified:   DESCRIPTION
#
no changes added to commit (use "git add" and/or "git commit -a")
</screen>

</section>

