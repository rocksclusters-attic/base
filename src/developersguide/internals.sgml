<chapter id="internals" xreflabel="internals">
	<title> Roll Internals </title>

<para>
This section describes in detail the two major components of a roll: packages
and configuration files.
</para>


<section id="internals-roll-env" xreflabel="internals-roll-env">
        <title> Roll Development Environment </title>

<para>
In this section, we'll build an example roll (the Valgrind Roll) from the
ground up.
</para>

<para>
First, we need to create a development environment that can be used to build
the Valgrind Roll.
On a Rocks frontend, execute:
</para>

<screen>
# mkdir -p /export/src/roll
# cd /export/src/roll
# rocks create new roll name=valgrind
</screen>

<para>
There are several more options you can supply to
<constant>"rocks create new roll"</constant> (execute
<constant>"rocks create new roll help"</constant> to see all the options).
</para>

<para>
The command <constant>"rocks create new roll name=valgrind"</constant>
creates the following file system:
</para>

<screen>

&boxur;&boxh;&boxh; valgrind
    &boxvr;&boxh;&boxh; graphs
    &boxv;   &boxur;&boxh;&boxh; default
    &boxvr;&boxh;&boxh; nodes
    &boxur;&boxh;&boxh; src
        &boxvr&boxh;&boxh; usersguide
        &boxv;   &boxur;&boxh;&boxh; images
        &boxur&boxh;&boxh; valgrind
            &boxur;&boxh;&boxh; Makefile
            &boxur;&boxh;&boxh; test-1.0.tgz
            &boxvr;&boxh;&boxh; version.mk

</screen>

<note>
<para>
At this point, the roll is "buildable". It doesn't actually do much, but
the structure is functional. Type <constant>make roll</constant> to build the roll.  When the build completes, a
<constant>valgrind-1.0-0.&lt;arch&gt;.disk1.iso</constant> file should be in the build directory. This is the complete roll image.
</para>
</note>

<para>
Now we are ready to add packages to the Valgrind Roll.
</para>


</section>


<section id="internals-packages" xreflabel="internals-packages">
        <title>Packages</title>

<para>
A Rocks roll requires that all packages contained in the roll must be in the
native format of the OS.
For Redhat-based Rocks clusters, this means all packages must be RPMS.
</para>

<para>
This guide covers a few ways to deal with RPMs. Already built, hand-built in a directory, and compiled RPMs.   The last (compiled RPMs) is by far the most 
common.  
</para>

<section id="internals-packages-rpm" xreflabel="internals-packages-rpm">
        <title>The Software is Already in an RPM </title>

<para>
If the software you wish to install is already in RPM format, you can directly
put it into the roll source tree.
For example, to put the RPM <constant>unzip-5.52-3.el5.x86_64.rpm</constant>
into the Valgrind Roll, execute:
</para>

<screen>
# mkdir -p /export/src/roll/valgrind/RPMS/x86_64
# cp /tmp/unzip-5.52-3.el5.x86_64.rpm /export/src/roll/valgrind/RPMS/x86_64
</screen>

</section>


<section id="internals-packages-bundle" xreflabel="internals-packages-bundle">
        <title>Bundle an Existing Subdirectory into an RPM </title>

<para>
If your application is already installed on your frontend and you would like
to bundle its subdirectory into and RPM, you can
create an RPM that contains all the files in a subdirectory.
For example, let's say you want to create an RPM from all the files under
/opt/stream.
You can execute:
</para>

<screen>
# rocks create package /opt/stream stream
</screen>

<para>
This will create a package named <constant>stream-1.0-1.x86_64.rpm</constant>
in the current working directory.
To see the contents of the package, execute:
</para>

<screen>
# rpm -qlp stream-1.0-1.x86_64.rpm 
/
/opt
/opt/stream
/opt/stream/bin
/opt/stream/bin/stream
/opt/stream/bin/stream_f
/opt/stream/docs
/opt/stream/docs/HISTORY.txt
/opt/stream/docs/LICENSE.txt
/opt/stream/docs/Makefile
/opt/stream/docs/READ.ME
/opt/stream/docs/ROCKS.txt
/opt/stream/docs/linux.mk
/opt/stream/docs/mysecond.c
/opt/stream/docs/stream.c
/opt/stream/docs/stream.f
/opt/stream/docs/sunos.mk
/opt/stream/docs/version.mk
</screen>

<para>
There are several more options you can supply to
<constant>"rocks create package"</constant> (execute
<constant>"rocks create package help"</constant> to see all the options).
</para>

<para>
Now place the RPM into the correct directory within the roll:
</para>

<screen>
# mkdir -p /export/src/roll/valgrind/RPMS/x86_64
# cp stream-1.0-1.x86_64.rpm /export/src/roll/valgrind/RPMS/x86_64
</screen>


</section>


<section id="internals-packages-src"
	xreflabel="Create an RPM from a Source Code Tarball">
        <title>Create an RPM from a Source Code Tarball (Compiled RPM)</title>

<para>
The most common way we create RPMS is from source tarballs (the classic:
untar, ./configure, make, make install). Rocks has a set of Makefile includes
that greatly simplifies the creation of RPMs. Most software can be packaged as
an RPM without ever seeing the internals of the package format. 
</para>

<para>
First, we'll download the source tarball into the correct directory:
</para>

<screen>
# cd /export/src/roll/valgrind/src/valgrind
# wget http://valgrind.org/downloads/valgrind-3.6.0.tar.bz2
</screen>

<para>
Edit <constant>version.mk</constant> and change
<constant>NAME = test</constant> to
<constant>NAME = valgrind</constant>, change
<constant>TARBALL_POSTFIX = tgz</constant> to
<constant>TARBALL_POSTFIX = tar.bz2</constant>, change
<constant>PKGROOT = /opt/valgrind</constant> to
<constant>PKGROOT = /opt</constant>,and change
<constant>VERSION = 1.0</constant> to
<constant>VERSION = 3.6.0</constant>.
Your version.mk should look like:
</para>

<screen>
PKGROOT		= /opt
NAME    	= valgrind
VERSION 	= 3.6.0
RELEASE 	= 1
TARBALL_POSTFIX	= tar.bz2
</screen>

<para>
Edit <constant>Makefile</constant> and change the line:
<constant>gunzip -c</constant> to
<constant>bzcat</constant> (since the tarball is a bz2).
</para>

<para>
Now build the RPM:
</para>

<screen>
# make rpm
</screen>

<para>
It will take several minutes to build the package.
When it completes, you'll see the line:
</para>

<screen>
Wrote: /export/src/roll/valgrind/RPMS/x86_64/valgrind-3.6.0-1.x86_64.rpm
</screen>

<para>
You can inspect the contents of the <constant>valgrind</constant> RPM:
</para>

<screen>
# rpm -qlp /export/src/roll/valgrind/RPMS/x86_64/valgrind-3.6.0-1.x86_64.rpm
/
/opt
/opt/valgrind
/opt/valgrind/bin
/opt/valgrind/bin/callgrind_annotate
/opt/valgrind/bin/callgrind_control
/opt/valgrind/bin/cg_annotate
/opt/valgrind/bin/cg_diff
/opt/valgrind/bin/cg_merge
/opt/valgrind/bin/ms_print
/opt/valgrind/bin/no_op_client_for_valgrind
/opt/valgrind/bin/valgrind
/opt/valgrind/bin/valgrind-listener
/opt/valgrind/include
/opt/valgrind/include/valgrind
/opt/valgrind/include/valgrind/callgrind.h
   .
   .
   .
</screen>
<para>
Note that the valgrind-3.6.0-1.x86_64.rpm RPM was automatically placed into
the correct directory (/export/src/roll/valgrind/RPMS/x86_64).
</para>

<note>
<para>
If you want to pass different <constant>configure</constant> options to for
your build, edit your <constant>Makefile</constant>.
</para>
</note>

</section>
<section id="internals-rpm-make-process" xreflabel="internals-rpm-make-process">
        <title>The RPM Makefile Process</title>
<para>
The Rocks Makefile include structure is invoked from the sample Makefile in the lines.
<screen>
-include $(ROCKSROOT)/etc/Rules.mk
include Rules.mk
</screen>
</para>
<para>
The main purpose of this structure is to create the correct files so that the 
<constant>rpmbuild</constant> can work properly. The core of Rocks builds more
than 300 different packages, and our goal was to eliminate the creation
of custom RPM spec files. Spec files are the text files that drive the overall
package creation. 
</para>

<para>
Let's look at the other directories created on demand when you type 
<constant>make rpm</constant>. The roll directory structure now looks like before: 
</para>

<screen>
.
&boxur;&boxh;&boxh; valgrind
    &boxvr;&boxh;&boxh; graphs
    &boxv;   &boxur;&boxh;&boxh; default
    &boxvr;&boxh;&boxh; nodes
    &boxur;&boxh;&boxh; src
        &boxvr;&boxh;&boxh; usersguide
        &boxv;   &boxur;&boxh;&boxh; images
        &boxur;&boxh;&boxh; valgrind
</screen>
<para>
and AFTER <constant>make rpm</constant> is executed.
</para>
<screen>
&boxur;&boxh;&boxh; valgrind
    &boxvr;&boxh;&boxh; BUILD
    &boxv;   &boxur;&boxh;&boxh; valgrind-3.6.0
    &boxvr;&boxh;&boxh; graphs
    &boxv;   &boxur;&boxh;&boxh; default
    &boxvr;&boxh;&boxh; nodes
    &boxvr;&boxh;&boxh; RPMS
    &boxv;   &boxvr;&boxh;&boxh; noarch
    &boxv;   &boxur;&boxh;&boxh; x86_64
    &boxvr;&boxh;&boxh; SOURCES
    &boxvr;&boxh;&boxh; SPECS
    &boxvr;&boxh;&boxh; src
    &boxv;   &boxvr;&boxh;&boxh; usersguide
    &boxv;   &boxur;&boxh;&boxh; valgrind
    &boxur;&boxh;&boxh; SRPMS
</screen>
<para>
The important directories are <constant>BUILD, SOURCES, SPECS, and RPMS</constant>.  This is the structure that <computeroutput>rpmbuild</computeroutput> is
expecting.  It is worth looking at the contents of the directories in some detail.
</para>

<itemizedlist>

	<listitem><para>
	SPECS/valgrind.spec - created automatically. Can create in the 
        src/valgrid with <constant> make valgrind.spec </constant>
	</para></listitem>

	<listitem><para>
	SOURCES/valgrind-3.6.0.tar.gz - This is a tar of src/valgrind directory
	after the <constant>make pretar</constant> target (if present) 
	has been evaluated.  This becomes the "source" referenced in the spec 
	file.
	</para></listitem>

	<listitem><para>
	BUILD/valgrind-3.6.0 - this is where the actual build/compile takes
        place. 
	</para></listitem>

</itemizedlist>

<para> 
Let's take a look at the contents of the BUILD directory
</para>

<screen>
BUILD
&boxur;&boxh;&boxh; valgrind-3.6.0
    &boxvr;&boxh;&boxh; _arch
    &boxvr;&boxh;&boxh; _distribution
    &boxvr;&boxh;&boxh; Makefile
    &boxvr;&boxh;&boxh; _os
    &boxvr;&boxh;&boxh; python.mk
    &boxvr;&boxh;&boxh; rocks-version-common.mk
    &boxvr;&boxh;&boxh; rocks-version.mk
    &boxvr;&boxh;&boxh; Rules-install.mk
    &boxvr;&boxh;&boxh; Rules-linux-centos.mk
    &boxvr;&boxh;&boxh; Rules-linux.mk
    &boxvr;&boxh;&boxh; Rules.mk
    &boxvr;&boxh;&boxh; Rules-rcfiles.mk
    &boxvr;&boxh;&boxh; Rules-scripts.mk
    &boxvr;&boxh;&boxh; test-1.0.tgz
    &boxvr;&boxh;&boxh; valgrind-3.6.0
    &boxvr;&boxh;&boxh; valgrind-3.6.0.tar.bz2
    &boxur;&boxh;&boxh; version.mk
</screen>

<para>
The <constant>Makefile</constant> is the <emphasis>same</emphasis> file as
the <constant>src/valgrind</constant> directory. The file
<constant>valgrind-3.6.0.tar.bz2</constant> is also the same.
</para> 

<section id="internals-rpm-make-spec" xreflabel="internals-rpm-make-spec">
        <title>How the SPEC file does it's building/installing</title>

<para> Ultimately, the program <constant>rpmbuild</constant> must be called
to do its work.  The generated spec file (valgrind.spec) is used to drive the
rpmbuild process.   RPM spec files can be very complicated, Rocks takes a very
simple approach, essentially ignorning many of the advanced capabilities of 
RPM specification.
</para>
<para>
What follows here is an abbreviated spec file.  It's beyond this guide to
describe in detail options in a spec file. A number of web resources are 
available if more in-depth information is desired.
<screen>
Summary: valgrind
Name: valgrind
Version: 3.6.0
Release: 1
Source: valgrind-3.6.0.tar.gz
Buildroot: /export/src/roll/valgrind/src/valgrind/valgrind.buildroot
%description
valgrind
%prep
%setup
%build
printf "\n\n\n### build ###\n\n\n"
BUILDROOT=/export/src/roll/valgrind/src/valgrind/valgrind.buildroot make -f /export/src/roll/valgrind/src/valgrind/valgrind.spec.mk build
%install
printf "\n\n\n### install ###\n\n\n"
BUILDROOT=/export/src/roll/valgrind/src/valgrind/valgrind.buildroot make -f /export/src/roll/valgrind/src/valgrind/valgrind.spec.mk install
%files
/
</screen>
</para>

<para> The generated spec file must have <constant>%build</constant> and
<constant>%install</constant> sections to, respectively, build and install software. The concept is very simple, the <constant>%build</constant> section of 
the spec simply directs <constant>rpmbuild</constant> to call 
<constant>make build</constant>.
</para>
<para>
The last section is <constant>%files</constant> which takes "/" as the default.
This will package ALL files that have installed into the BUILDROOT directory.
</para>
</section>
</section>


</section>


<section id="internals-xml-files" xreflabel="internals-xml-files">
        <title>Configuring Software with XML Files</title>

<para>
Rocks generates kickstart files for compute nodes dynamically using a
structure called the "kickstart graph".
This graph is made from graph XML files and node XML files.
In general, a node XML file contains a list of packages that should be
installed on a host and commands to configure those packages.
Graph XML files contain a description of "edges" that tie the node XML files
together.
</para>

<para>
When a host asks for its configuration file from the frontend, a process on
the frontend traverses the node XML files based on the definitions within the
graph XML files.
In addition, the graph XML files can enforce a relative order between the
node XML files.
</para>


<section id="internals-xml-files-node" xreflabel="internals-xml-files-node">
        <title>Node XML Files</title>

<para>
All software configuration commands are contained within node XML files.
Let's look at a real node XML (<constant>grub.xml</constant> from the
Base Roll):
</para>

<screen>
<![CDATA[
<?xml version="1.0" standalone="no"?>

<kickstart>

  <description>

  Boot loader support (GRand Unified Bootloader)

  </description>


<package>grub</package>


<post>

<!-- take out the splashscreen -->
<file name="/tmp/grub.conf" expr="grep -v splashimage /boot/grub/grub.conf"/>
mv /tmp/grub.conf /boot/grub/grub.conf

<!-- Preserve the original grub.conf -->
cp /boot/grub/grub.conf /boot/grub/grub-orig.conf

</post>


</kickstart>
]]>
</screen>

<para>
We see that the above node XML file will install the "grub" package
(<constant>&lt;package&gt;grub&lt;/package&gt;</constant>), and in the
"post" configuration step during a kickstart installation, it will
modify the configuration file (<constant>/boot/grub/grub.conf</constant>).
</para>

<note>
<para>
During a kickstart installation, all the packages from all the node XML files
are installed first, then all the "post" sections are executed.
That is, when you write a post section, you are guaranteed that all the
software packages have been installed.
</para>
</note>

<para>
For a complete definition of the node XML file syntax, see
<xref linkend="node-xml-tags">.
</para>

<para>
For our Valgrind example, we will modify the node XML file that was already
created for us:
</para>

<screen>
# cd /export/src/roll/valgrind/nodes
# mv valgrind.xml valgrind-base.xml
</screen>

<note>
<para>
A node XML file naming convention in Rocks is to begin the name all the node
XML files with the name of the roll they are associated with.
For example, all node XML files in the SGE roll begin with "sge-".
</para>

<para>
Another naming convention is to add the name "client", "server" or "base" to
the name of the node XML file based on which appliance type the node XML
file will be applied to.
For example, if the node XML file is intended to configure only backend
appliances (e.g., compute nodes or tile nodes), then we'd name our node XML file
"valgrind-client.xml".
If the node XML file is intended to configure only frontend appliances, then
we'd name our node XML file "valgrind-server.xml".
And if the node XML file is for all appliance types, we'd name it
"valgrind-base.xml". 
</para>
</note>

<para>
When you edit "valgrind-base.xml", you'll see:
</para>

<screen>
<![CDATA[
<?xml version="1.0" standalone="no"?>

<kickstart>

        <description>
        Your valgrind roll description here
        </description>

        <copyright>
        
        				Rocks(r)
        		         www.rocksclusters.org
        		       version 6.1.1 (Sand Boa)
        
        Copyright (c) 2000 - 2014 The Regents of the University of California.
        All rights reserved.	
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are
        met:
        
        1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright
        notice unmodified and in its entirety, this list of conditions and the
        following disclaimer in the documentation and/or other materials provided 
        with the distribution.
        
        3. All advertising and press materials, printed or electronic, mentioning
        features or use of this software must display the following acknowledgement: 
        
        	"This product includes software developed by the Rocks(r)
        	Cluster Group at the San Diego Supercomputer Center at the
        	University of California, San Diego and its contributors."
        
        4. Except as permitted for the purposes of acknowledgment in paragraph 3,
        neither the name or logo of this software nor the names of its
        authors may be used to endorse or promote products derived from this
        software without specific prior written permission.  The name of the
        software includes the following terms, and any derivatives thereof:
        "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
        the associated name, interested parties should contact Technology 
        Transfer & Intellectual Property Services, University of California, 
        San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
        Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
        
        THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
        BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
        CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
        SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
        BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
        WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
        OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
        IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
        </copyright>

        <changelog>
        $Log: internals.sgml,v $
        Revision 1.11  2013/01/16 04:09:36  phil
        Updates/more detail of internals

        Revision 1.10  2012/11/27 00:48:34  phil
        Copyright Storm for Emerald Boa

        Revision 1.9  2012/05/06 05:48:40  phil
        Copyright Storm for Mamba

        Revision 1.8  2011/07/23 02:30:44  phil
        Viper Copyright

        Revision 1.7  2011/02/08 21:59:41  bruno
        edits

        Revision 1.6  2011/02/07 23:30:26  bruno
        first pass at build section

        Revision 1.5  2011/02/07 20:48:46  bruno
        the first draft of 'roll internals' is done.

        Revision 1.4  2011/02/05 01:04:49  bruno
        checkpoint

        </changelog>

        <package>valgrind</package>
        <package>roll-valgrind-usersguide</package>

</kickstart>
]]>
</screen>

<para>
Notice above that the "valgrind" and "roll-valgrind-usersguide" RPMs
are specified in <constant>&lt;package&gt;</constant> tags which means those
RPMs will be installed by the Red Hat installer.
</para>

<para>
Now let's add a <constant>&lt;post&gt;</constant> section to it:
</para>

<screen>
<![CDATA[
<?xml version="1.0" standalone="no"?>

<kickstart>

        <description>
        Your valgrind roll description here
        </description>

        <copyright>
        
        				Rocks(r)
        		         www.rocksclusters.org
        		       version 6.1.1 (Sand Boa)
        
        Copyright (c) 2000 - 2014 The Regents of the University of California.
        All rights reserved.	
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are
        met:
        
        1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright
        notice unmodified and in its entirety, this list of conditions and the
        following disclaimer in the documentation and/or other materials provided 
        with the distribution.
        
        3. All advertising and press materials, printed or electronic, mentioning
        features or use of this software must display the following acknowledgement: 
        
        	"This product includes software developed by the Rocks(r)
        	Cluster Group at the San Diego Supercomputer Center at the
        	University of California, San Diego and its contributors."
        
        4. Except as permitted for the purposes of acknowledgment in paragraph 3,
        neither the name or logo of this software nor the names of its
        authors may be used to endorse or promote products derived from this
        software without specific prior written permission.  The name of the
        software includes the following terms, and any derivatives thereof:
        "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
        the associated name, interested parties should contact Technology 
        Transfer & Intellectual Property Services, University of California, 
        San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
        Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
        
        THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
        BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
        CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
        SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
        BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
        WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
        OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
        IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
        </copyright>

        <changelog>
        $Log: internals.sgml,v $
        Revision 1.11  2013/01/16 04:09:36  phil
        Updates/more detail of internals

        Revision 1.10  2012/11/27 00:48:34  phil
        Copyright Storm for Emerald Boa

        Revision 1.9  2012/05/06 05:48:40  phil
        Copyright Storm for Mamba

        Revision 1.8  2011/07/23 02:30:44  phil
        Viper Copyright

        Revision 1.7  2011/02/08 21:59:41  bruno
        edits

        Revision 1.6  2011/02/07 23:30:26  bruno
        first pass at build section

        Revision 1.5  2011/02/07 20:48:46  bruno
        the first draft of 'roll internals' is done.

        Revision 1.4  2011/02/05 01:04:49  bruno
        checkpoint

        </changelog>

        <package>valgrind</package>
        <package>roll-valgrind-usersguide</package>

<post>

<file name="/etc/motd" mode="append">

This node has "valgrind" configured for it.

</file>

</post>

</kickstart>

]]>
</screen>

<para>
This post section will append a small note to an installing host's
<constant>/etc/motd</constant>.
</para>

<para>
Now that we have our first node XML file, we need to "splice" it into the
Rocks kickstart graph -- which is the subject of the next section.
</para>


</section>


<section id="internals-xml-files-graph" xreflabel="internals-xml-files-graph">
        <title>Graph XML Files</title>

<para>
Every roll has node XML files and a graph XML file.
Node XML files describe what packages should be installed and how those
packages should be configured.
A graph XML file describes how all the node XML files are "connected", that is,
a graph XML file describes the "edges" between nodes.
</para>

<para>
Below is a picture of how the Base Roll's nodes are connected together via
its graph XML file:
</para>

<para>
<mediaobject>
	<imageobject>
	<imagedata
		fileref="images/base-graph.png">
	</imageobject>
</mediaobject>
</para>

<para>
Let's "splice" our "valgrind-base.xml" node XML file into the Rocks kickstart
graph.
We'll look at the default graph file that was automatically created for us:
</para>

<screen>
# cd /export/src/roll/valgrind/graphs/default
</screen>

<para>
Now edit the file "valgrind.xml":
</para>

<screen>
<![CDATA[
<?xml version="1.0" standalone="no"?>

<graph>

        <description>

        The valgrind Roll

        </description>

        <copyright>
        
        				Rocks(r)
        		         www.rocksclusters.org
        		       version 6.1.1 (Sand Boa)
        
        Copyright (c) 2000 - 2014 The Regents of the University of California.
        All rights reserved.	
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are
        met:
        
        1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright
        notice unmodified and in its entirety, this list of conditions and the
        following disclaimer in the documentation and/or other materials provided 
        with the distribution.
        
        3. All advertising and press materials, printed or electronic, mentioning
        features or use of this software must display the following acknowledgement: 
        
        	"This product includes software developed by the Rocks(r)
        	Cluster Group at the San Diego Supercomputer Center at the
        	University of California, San Diego and its contributors."
        
        4. Except as permitted for the purposes of acknowledgment in paragraph 3,
        neither the name or logo of this software nor the names of its
        authors may be used to endorse or promote products derived from this
        software without specific prior written permission.  The name of the
        software includes the following terms, and any derivatives thereof:
        "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
        the associated name, interested parties should contact Technology 
        Transfer & Intellectual Property Services, University of California, 
        San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
        Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
        
        THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
        BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
        CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
        SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
        BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
        WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
        OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
        IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
        </copyright>

        <changelog>
        $Log: internals.sgml,v $
        Revision 1.11  2013/01/16 04:09:36  phil
        Updates/more detail of internals

        Revision 1.10  2012/11/27 00:48:34  phil
        Copyright Storm for Emerald Boa

        Revision 1.9  2012/05/06 05:48:40  phil
        Copyright Storm for Mamba

        Revision 1.8  2011/07/23 02:30:44  phil
        Viper Copyright

        Revision 1.7  2011/02/08 21:59:41  bruno
        edits

        Revision 1.6  2011/02/07 23:30:26  bruno
        first pass at build section

        Revision 1.5  2011/02/07 20:48:46  bruno
        the first draft of 'roll internals' is done.

        Revision 1.4  2011/02/05 01:04:49  bruno
        checkpoint

        </changelog>

        <!-- add edges here -->

</graph>
]]>
</screen>

<para>
We will add an "edge".
Since we want our "valgrind-base.xml" node XML file to be installed on all
nodes, we'll make an edge from the "base" node XML file to "valgrind-base":
</para>

<screen>
<![CDATA[
<?xml version="1.0" standalone="no"?>

<graph>

        <description>

        The valgrind Roll

        </description>

        <copyright>
        
        				Rocks(r)
        		         www.rocksclusters.org
        		       version 6.1.1 (Sand Boa)
        
        Copyright (c) 2000 - 2014 The Regents of the University of California.
        All rights reserved.	
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are
        met:
        
        1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright
        notice unmodified and in its entirety, this list of conditions and the
        following disclaimer in the documentation and/or other materials provided 
        with the distribution.
        
        3. All advertising and press materials, printed or electronic, mentioning
        features or use of this software must display the following acknowledgement: 
        
        	"This product includes software developed by the Rocks(r)
        	Cluster Group at the San Diego Supercomputer Center at the
        	University of California, San Diego and its contributors."
        
        4. Except as permitted for the purposes of acknowledgment in paragraph 3,
        neither the name or logo of this software nor the names of its
        authors may be used to endorse or promote products derived from this
        software without specific prior written permission.  The name of the
        software includes the following terms, and any derivatives thereof:
        "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
        the associated name, interested parties should contact Technology 
        Transfer & Intellectual Property Services, University of California, 
        San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
        Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
        
        THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
        BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
        CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
        SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
        BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
        WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
        OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
        IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
        </copyright>

        <changelog>
        $Log: internals.sgml,v $
        Revision 1.11  2013/01/16 04:09:36  phil
        Updates/more detail of internals

        Revision 1.10  2012/11/27 00:48:34  phil
        Copyright Storm for Emerald Boa

        Revision 1.9  2012/05/06 05:48:40  phil
        Copyright Storm for Mamba

        Revision 1.8  2011/07/23 02:30:44  phil
        Viper Copyright

        Revision 1.7  2011/02/08 21:59:41  bruno
        edits

        Revision 1.6  2011/02/07 23:30:26  bruno
        first pass at build section

        Revision 1.5  2011/02/07 20:48:46  bruno
        the first draft of 'roll internals' is done.

        Revision 1.4  2011/02/05 01:04:49  bruno
        checkpoint

        </changelog>

        <!-- add edges here -->

        <edge from="base">
                <to>valgrind-base</to>
        </edge>

</graph>
]]>
</screen>

<note>
<para>
Note that we don't add the ".xml" file extension in edge descriptions.
</para>
</note>

<para>
Our node XML file has now been spliced into the Rocks kickstart graph.
Note: the node XML file "base" is from the Base Roll.
</para>

<para>
In the picture below, we see how "valgrind-base.xml" has been spliced into
the Rocks kickstart graph:
</para>

<para>
<mediaobject>
	<imageobject>
	<imagedata
		fileref="images/base-valgrind-simple-graph.png">
	</imageobject>
</mediaobject>
</para>


<section id="internals-xml-files-graph-ordering"
	xreflabel="internals-xml-files-graph-ordering">

        <title>Controlling the Order of Post Section Execution</title>

<para>
There are instances when we need to ensure that a post section in one
node XML file executes before (or after) a post section in another node XML
file.
We can accomplish this by specifying an
<constant>&lt;order&gt;</constant> tag in a graph XML
file.
To show how this is done, we'll create two new node XML files and then we'll
edit the graph XML file.
</para>

<para>
We will create two new node XML files where one file should be
applied to a frontend (named "valgrind-server.xml") and the other should be
applied to the backend appliances (named "valgrind-client.xml).
We'll add <constant>&lt;package&gt;</constant> and
<constant>&lt;post&gt;</constant> tags to both.
</para>

<para>
Here's the contents of "valgrind-client.xml":
</para>

<screen>
<![CDATA[
<?xml version="1.0" standalone="no"?>

<kickstart>

	<description>
	Valgrind client node XML file. This file should be applied to
	backend appliances (e.g., compute nodes and tile nodes).
	</description>

	<copyright>
	
					Rocks(r)
			         www.rocksclusters.org
			       version 6.1.1 (Sand Boa)
	
	Copyright (c) 2000 - 2014 The Regents of the University of California.
	All rights reserved.	
	
	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are
	met:
	
	1. Redistributions of source code must retain the above copyright
	notice, this list of conditions and the following disclaimer.
	
	2. Redistributions in binary form must reproduce the above copyright
	notice unmodified and in its entirety, this list of conditions and the
	following disclaimer in the documentation and/or other materials provided 
	with the distribution.
	
	3. All advertising and press materials, printed or electronic, mentioning
	features or use of this software must display the following acknowledgement: 
	
		"This product includes software developed by the Rocks(r)
		Cluster Group at the San Diego Supercomputer Center at the
		University of California, San Diego and its contributors."
	
	4. Except as permitted for the purposes of acknowledgment in paragraph 3,
	neither the name or logo of this software nor the names of its
	authors may be used to endorse or promote products derived from this
	software without specific prior written permission.  The name of the
	software includes the following terms, and any derivatives thereof:
	"Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
	the associated name, interested parties should contact Technology 
	Transfer & Intellectual Property Services, University of California, 
	San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
	Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
	
	THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
	PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
	BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
	BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
	OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
	IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
	</copyright>

	<changelog>
	$Log: internals.sgml,v $
	Revision 1.11  2013/01/16 04:09:36  phil
	Updates/more detail of internals
	
	Revision 1.10  2012/11/27 00:48:34  phil
	Copyright Storm for Emerald Boa
	
	Revision 1.9  2012/05/06 05:48:40  phil
	Copyright Storm for Mamba
	
	Revision 1.8  2011/07/23 02:30:44  phil
	Viper Copyright
	
	Revision 1.7  2011/02/08 21:59:41  bruno
	edits
	
	Revision 1.6  2011/02/07 23:30:26  bruno
	first pass at build section
	
	Revision 1.5  2011/02/07 20:48:46  bruno
	the first draft of 'roll internals' is done.
	
	</changelog>

<post>

<file name="/etc/motd" mode="append">

Valgrind on a "client".

</file>

</post>

</kickstart>
]]>
</screen>

<para>
And here is the contents of "valgrind-server.xml":
</para>

<screen>
<![CDATA[
<?xml version="1.0" standalone="no"?>

<kickstart>

	<description>
	Valgrind server node XML file. This file should be applied to
	frontends.
	</description>

	<copyright>
	
					Rocks(r)
			         www.rocksclusters.org
			       version 6.1.1 (Sand Boa)
	
	Copyright (c) 2000 - 2014 The Regents of the University of California.
	All rights reserved.	
	
	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are
	met:
	
	1. Redistributions of source code must retain the above copyright
	notice, this list of conditions and the following disclaimer.
	
	2. Redistributions in binary form must reproduce the above copyright
	notice unmodified and in its entirety, this list of conditions and the
	following disclaimer in the documentation and/or other materials provided 
	with the distribution.
	
	3. All advertising and press materials, printed or electronic, mentioning
	features or use of this software must display the following acknowledgement: 
	
		"This product includes software developed by the Rocks(r)
		Cluster Group at the San Diego Supercomputer Center at the
		University of California, San Diego and its contributors."
	
	4. Except as permitted for the purposes of acknowledgment in paragraph 3,
	neither the name or logo of this software nor the names of its
	authors may be used to endorse or promote products derived from this
	software without specific prior written permission.  The name of the
	software includes the following terms, and any derivatives thereof:
	"Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
	the associated name, interested parties should contact Technology 
	Transfer & Intellectual Property Services, University of California, 
	San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
	Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
	
	THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
	PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
	BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
	BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
	OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
	IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
	</copyright>

	<changelog>
	$Log: internals.sgml,v $
	Revision 1.11  2013/01/16 04:09:36  phil
	Updates/more detail of internals
	
	Revision 1.10  2012/11/27 00:48:34  phil
	Copyright Storm for Emerald Boa
	
	Revision 1.9  2012/05/06 05:48:40  phil
	Copyright Storm for Mamba
	
	Revision 1.8  2011/07/23 02:30:44  phil
	Viper Copyright
	
	Revision 1.7  2011/02/08 21:59:41  bruno
	edits
	
	Revision 1.6  2011/02/07 23:30:26  bruno
	first pass at build section
	
	Revision 1.5  2011/02/07 20:48:46  bruno
	the first draft of 'roll internals' is done.
	
	</changelog>

	<package>roll-valgrind-usersguide</package>

<post>

<file name="/etc/motd" mode="append">

Valgrind on a "server".

</file>

</post>

</kickstart>
]]>
</screen>

<para>
Then, to splice them in to the Rocks kickstart graph, we'll modify our
graph XML file "valgrind.xml" to look like:
</para>

<screen>
<![CDATA[
<?xml version="1.0" standalone="no"?>

<graph>

        <description>

        The valgrind Roll

        </description>

        <copyright>
        
        				Rocks(r)
        		         www.rocksclusters.org
        		       version 6.1.1 (Sand Boa)
        
        Copyright (c) 2000 - 2014 The Regents of the University of California.
        All rights reserved.	
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are
        met:
        
        1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright
        notice unmodified and in its entirety, this list of conditions and the
        following disclaimer in the documentation and/or other materials provided 
        with the distribution.
        
        3. All advertising and press materials, printed or electronic, mentioning
        features or use of this software must display the following acknowledgement: 
        
        	"This product includes software developed by the Rocks(r)
        	Cluster Group at the San Diego Supercomputer Center at the
        	University of California, San Diego and its contributors."
        
        4. Except as permitted for the purposes of acknowledgment in paragraph 3,
        neither the name or logo of this software nor the names of its
        authors may be used to endorse or promote products derived from this
        software without specific prior written permission.  The name of the
        software includes the following terms, and any derivatives thereof:
        "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
        the associated name, interested parties should contact Technology 
        Transfer & Intellectual Property Services, University of California, 
        San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
        Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
        
        THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
        BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
        CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
        SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
        BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
        WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
        OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
        IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
        </copyright>

        <changelog>
        $Log: internals.sgml,v $
        Revision 1.11  2013/01/16 04:09:36  phil
        Updates/more detail of internals

        Revision 1.10  2012/11/27 00:48:34  phil
        Copyright Storm for Emerald Boa

        Revision 1.9  2012/05/06 05:48:40  phil
        Copyright Storm for Mamba

        Revision 1.8  2011/07/23 02:30:44  phil
        Viper Copyright

        Revision 1.7  2011/02/08 21:59:41  bruno
        edits

        Revision 1.6  2011/02/07 23:30:26  bruno
        first pass at build section

        Revision 1.5  2011/02/07 20:48:46  bruno
        the first draft of 'roll internals' is done.

        Revision 1.4  2011/02/05 01:04:49  bruno
        checkpoint

        </changelog>

        <!-- add edges here -->

        <edge from="base">
                <to>valgrind-base</to>
        </edge>

        <edge from="server">
                <to>valgrind-server</to>
        </edge>

        <edge from="client">
                <to>valgrind-client</to>
        </edge>

</graph>
]]>
</screen>

<para>
With the above graph XML file, we can see (at a high level) how the Valgrind
Roll is spliced in with the Base Roll.
the Base Roll node XML files are yellow and the Valgrind Roll
node XML files are red.
</para>

<para>
<mediaobject>
	<imageobject>
	<imagedata
		fileref="images/base-valgrind-graph.png">
	</imageobject>
</mediaobject>
</para>

<para>
If we zoom in, we can see how two of the Valgrind node XML files have been
spliced in:
</para>

<para>
<mediaobject>
	<imageobject>
	<imagedata
		fileref="images/base-valgrind-zoom.png">
	</imageobject>
</mediaobject>
</para>

<para>
Now suppose we want the post section of "valgrind-server.xml" to execute
<emphasis>before</emphasis> the post section of "valgrind-base.xml" and we
want the post section of "valgrind-client.xml" to execute
<emphasis>after</emphasis> "valgrind-base.xml".
We can enforce this ordering by adding two
<constant>&lt;order&gt;</constant> tags:
</para>

<screen>
<![CDATA[
<?xml version="1.0" standalone="no"?>

<graph roll="valgrind">

	<description>

	The valgrind Roll

	</description>

	<copyright>
	
					Rocks(r)
			         www.rocksclusters.org
			       version 6.1.1 (Sand Boa)
	
	Copyright (c) 2000 - 2014 The Regents of the University of California.
	All rights reserved.	
	
	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are
	met:
	
	1. Redistributions of source code must retain the above copyright
	notice, this list of conditions and the following disclaimer.
	
	2. Redistributions in binary form must reproduce the above copyright
	notice unmodified and in its entirety, this list of conditions and the
	following disclaimer in the documentation and/or other materials provided 
	with the distribution.
	
	3. All advertising and press materials, printed or electronic, mentioning
	features or use of this software must display the following acknowledgement: 
	
		"This product includes software developed by the Rocks(r)
		Cluster Group at the San Diego Supercomputer Center at the
		University of California, San Diego and its contributors."
	
	4. Except as permitted for the purposes of acknowledgment in paragraph 3,
	neither the name or logo of this software nor the names of its
	authors may be used to endorse or promote products derived from this
	software without specific prior written permission.  The name of the
	software includes the following terms, and any derivatives thereof:
	"Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
	the associated name, interested parties should contact Technology 
	Transfer & Intellectual Property Services, University of California, 
	San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
	Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
	
	THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS''
	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
	PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
	BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
	BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
	OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
	IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
	</copyright>

	<changelog>
	$Log: internals.sgml,v $
	Revision 1.11  2013/01/16 04:09:36  phil
	Updates/more detail of internals
	
	Revision 1.10  2012/11/27 00:48:34  phil
	Copyright Storm for Emerald Boa
	
	Revision 1.9  2012/05/06 05:48:40  phil
	Copyright Storm for Mamba
	
	Revision 1.8  2011/07/23 02:30:44  phil
	Viper Copyright
	
	Revision 1.7  2011/02/08 21:59:41  bruno
	edits
	
	Revision 1.6  2011/02/07 23:30:26  bruno
	first pass at build section
	
	Revision 1.5  2011/02/07 20:48:46  bruno
	the first draft of 'roll internals' is done.
	
	</changelog>

	<!-- add edges here -->

	<edge from="base">
		<to>valgrind-base</to>
	</edge>

	<edge from="server">
		<to>valgrind-server</to>
	</edge>

	<edge from="client">
		<to>valgrind-client</to>
	</edge>


	<!-- enforce post section ordering -->

	<!--
		valgrind-server post sections execute before valgrind-base
		post sections
	-->
	<order head="valgrind-server">
		<tail>valgrind-base</tail>
	</order>

	<!--
		valgrind-client post sections execute after valgrind-base
		post sections
	-->
	<order head="valgrind-base">
		<tail>valgrind-client</tail>
	</order>

</graph>
]]>
</screen>

</section>

</section>


<section id="internals-xml-files-attr" xreflabel="internals-xml-files-attr">
        <title>Attributes</title>

<para>
In Rocks, "attributes" are a way to have variables inside node and graph
XML files.
Attributes are evaluated during kickstart file creation (one of the first
actions done when a host is installed).
The following is an example of how the "hostname" attribute is used in a
post section of a node XML file:
</para>

<screen>
<![CDATA[
<post>

<!--
        set the hostname to the private name.
-->
/bin/hostname &hostname;

</post>
]]>
</screen>

<para>
In node XML files, if you want to use an attribute in a post section, you
need to encode it as an XML entity (thus the '&' and ';' characters that
bracket the "hostname" attribute).
</para>

<para>
There are four levels of attributes: global, OS, appliance and host.
Global attributes apply to all hosts in a cluster, OS attributes apply to hosts of a specific OS type (currently "linux" or "sunos"), appliance attributes
apply to hosts that have the same appliance type (e.g., compute, tile, etc.),
and host attributes apply to only one host.
You can add an attribute with one of the following commands:
<constant>rocks add attr</constant> (global),
<constant>rocks add os attr</constant> (OS),
<constant>rocks add appliance attr</constant> (appliance global),
<constant>rocks add host attr</constant> (host).
</para>

<para>
To examine which attributes are currently set for a host, execute
<constant>rocks list host attr "hostname"</constant>.
For example:
</para>

<screen>
<![CDATA[
# rocks list host attr compute-0-0
HOST         ATTR                                  VALUE                                    SOURCE
compute-0-0: Condor_Client                         true                                     A     
compute-0-0: Condor_Daemons                        MASTER, STARTD                           G     
compute-0-0: Condor_EnableMPI                      no                                       G     
compute-0-0: Condor_HostAllow                      +                                        G     
compute-0-0: Condor_Master                         brunoland.rocksclusters.org              G     
compute-0-0: Condor_Network                        private                                  G     
compute-0-0: Condor_PasswordAuth                   no                                       G     
compute-0-0: Condor_PortHigh                       50000                                    G     
compute-0-0: Condor_PortLow                        40000                                    G     
compute-0-0: HttpConf                              /etc/httpd/conf                          O     
compute-0-0: HttpConfigDirExt                      /etc/httpd/conf.d                        O     
compute-0-0: HttpRoot                              /var/www/html                            O     
compute-0-0: Info_CertificateCountry               US                                       G     
compute-0-0: Info_CertificateLocality              San Diego                                G     
compute-0-0: Info_CertificateOrganization          SDSC                                     G     
compute-0-0: Info_CertificateState                 California                               G     
compute-0-0: Info_ClusterContact                   admin@place.org                          G     
compute-0-0: Info_ClusterLatlong                   N32.87 W117.22                           G     
compute-0-0: Info_ClusterName                      Brunoland                                G     
compute-0-0: Info_ClusterURL                       http://www.place.org/                    G     
compute-0-0: Kickstart_DistroDir                   /export/rocks                            G     
compute-0-0: Kickstart_Keyboard                    us                                       G     
compute-0-0: Kickstart_Lang                        en_US                                    G     
compute-0-0: Kickstart_Langsupport                 en_US                                    G     
compute-0-0: Kickstart_Multicast                   231.253.121.191                          G     
compute-0-0: Kickstart_PrivateAddress              10.1.1.1                                 G     
compute-0-0: Kickstart_PrivateBroadcast            10.1.255.255                             G     
compute-0-0: Kickstart_PrivateDNSDomain            local                                    G     
compute-0-0: Kickstart_PrivateDNSServers           10.1.1.1                                 G     
compute-0-0: Kickstart_PrivateGateway              10.1.1.1                                 G     
compute-0-0: Kickstart_PrivateHostname             brunoland                                G     
compute-0-0: Kickstart_PrivateKickstartBasedir     install                                  G     
compute-0-0: Kickstart_PrivateKickstartCGI         sbin/kickstart.cgi                       G     
compute-0-0: Kickstart_PrivateKickstartHost        10.1.1.1                                 G     
compute-0-0: Kickstart_PrivateNTPHost              10.1.1.1                                 G     
compute-0-0: Kickstart_PrivateNetmask              255.255.0.0                              G     
compute-0-0: Kickstart_PrivateNetmaskCIDR          16                                       G     
compute-0-0: Kickstart_PrivateNetwork              10.1.0.0                                 G     
compute-0-0: Kickstart_PrivateSyslogHost           10.1.1.1                                 G     
compute-0-0: Kickstart_PublicAddress               198.202.88.152                           G     
compute-0-0: Kickstart_PublicBroadcast             198.202.88.255                           G     
compute-0-0: Kickstart_PublicDNSDomain             rocksclusters.org                        G     
compute-0-0: Kickstart_PublicDNSServers            198.202.75.26                            G     
compute-0-0: Kickstart_PublicGateway               198.202.88.20                            G     
compute-0-0: Kickstart_PublicHostname              brunoland.rocksclusters.org              G     
compute-0-0: Kickstart_PublicKickstartHost         central.rocksclusters.org                G     
compute-0-0: Kickstart_PublicNTPHost               pool.ntp.org                             G     
compute-0-0: Kickstart_PublicNetmask               255.255.255.0                            G     
compute-0-0: Kickstart_PublicNetmaskCIDR           24                                       G     
compute-0-0: Kickstart_PublicNetwork               198.202.88.0                             G     
compute-0-0: Kickstart_Timezone                    America/Los_Angeles                      G     
compute-0-0: RootDir                               /root                                    O     
compute-0-0: Server_Partitioning                   manual                                   G     
compute-0-0: Xen_Dom0MinMem                        768                                      G     
compute-0-0: arch                                  x86_64                                   H     
compute-0-0: bio                                   true                                     A     
compute-0-0: dhcp_filename                         pxelinux.0                               A     
compute-0-0: dhcp_nextserver                       10.1.1.1                                 A     
compute-0-0: exec_host                             true                                     A     
compute-0-0: ganglia_address                       224.0.0.3                                G     
compute-0-0: hostname                              compute-0-0                              I     
compute-0-0: kickstartable                         yes                                      A     
compute-0-0: managed                               true                                     A     
compute-0-0: os                                    linux                                    H     
compute-0-0: rack                                  0                                        I     
compute-0-0: rank                                  0                                        I     
compute-0-0: rocks_version                         5.4                                      G     
compute-0-0: sge                                   true                                     A     
compute-0-0: ssh_use_dns                           true                                     G     
compute-0-0: submit_host                           false                                    A     
compute-0-0: tripwire_mail                         root@brunoland.rocksclusters.org         G     
compute-0-0: vm_mac_base_addr                      9a:58:ca:0:00:00                         G     
compute-0-0: vm_mac_base_addr_mask                 ff:ff:ff:c0:00:00                        G
]]>
</screen>

<para>
In the output above, the letters in the "SOURCE" column indicate the level
at which this host got the attribute.
'G' means the attribute is global, 'O' is an OS attribute, 'A' is an appliance
attribute, 'H' is a host attribute and 'I' in an intrinsic attribute (these
attributes cannot be removed or modified).
</para>

<para>
If a host has an attribute assigned to it, you can use it in a post section
by referring to it in its entity form ("&amp;attribute_name;").
For example, if you'd like to dynamically get the IP address of the private
network for the frontend, you'd use "&amp;Kickstart_PrivateAddress;" in a post
section.
</para>

<para>
Attributes can also be used as a "edge conditional" in graph XML files or
as a "post section conditional" in node XML files.
An edge conditional is used to conditionally traverse an edge in a graph XML
file.
The following is an excerpt from the Base Roll graph XML file:
</para>

<screen>
<![CDATA[
<edge from="client" to="x11" cond="x11"/>
]]>
</screen>

<para>
If the "x11" attribute is set to "true", then when a kickstart file is built
for a "client" host (e.g., a compute node or tile node), then the kickstart
file generation code will traverse the edge from "client" to "x11", that is, 
the "x11" node XML file will be included in the kickstart file.
Otherwise, if the "x11" attribute is set to false, then the "x11" node XML file
will not be included in the kickstart file.
</para>

<para>
Post section conditions are used to conditionally execute post sections.
The following is an excerpt from a node XML file from the SGE Roll:
</para>

<screen>
<![CDATA[
<post os="linux" cond="exec_host">

<file name="/etc/rc.d/rocksconfig.d/post-91-sge" mode="append">
SET_HOST_TYPE=" -x "
</file>

</post>
]]>
</screen>

<para>
If the attribute "exec_host" is true (and if this is a "linux" host), then the
post section will be executed, otherwise, this post section will be skipped.
</para>

</section>


</section>


</chapter>
