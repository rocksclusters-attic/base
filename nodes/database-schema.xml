<?xml version="1.0" standalone="no"?>

<kickstart>

  <description>

  Cluster Database SQL table structure.  This used to be generated
  from a dump of the structure on Meteor.  Now we just edit this
  directly.

  </description>

        <copyright>
        Copyright (c) 2000 - 2014 The Regents of the University of California.
        All rights reserved. Rocks(r) v6.1.1 www.rocksclusters.org
        
        </copyright>

  <changelog>
  $Log: database-schema.xml,v $
  Revision 1.59  2012/05/06 05:48:10  phil
  Copyright Storm for Mamba

  Revision 1.58  2011/07/23 02:30:14  phil
  Viper Copyright

  Revision 1.57  2011/06/21 06:03:31  anoop
  Create a giant spreadsheet of nodes,network, appliance, memberhip,
  and subnets information. This reduces complex SQL queries spanning
  multiple tables into simple ones spanning a single table

  Revision 1.56  2011/06/20 05:56:07  phil
  support rulesrc for system-defined rules.

  Revision 1.55  2011/06/10 19:30:28  anoop
  -All grants now moved to rocks-db-perms.py
  -Changed ordering so that database-security
   is setup before any database accesses
  -Bug fixes

  Revision 1.54  2011/06/08 03:00:42  phil
  Populate catindex with global, os defaults.

  Revision 1.53  2011/06/03 18:18:36  phil
  Firewall rules in new style

  Revision 1.52  2011/05/28 03:25:26  phil
  Add Firewall, report firewall now working with resolved rules.
  Created a TEMPTABLES database for temporary SQL tables.
  Still needs full testing.

  Revision 1.51  2011/05/23 04:59:42  phil
  Schema for indexed category resolution of firewall rules

  Revision 1.50  2011/05/10 23:35:44  anoop
  Bug fix

  Revision 1.49  2011/05/10 00:52:19  anoop
  Remove shadow attributes from attributes tables
  added secure attributes tables
  moved grants for each table from hardcoded SQL statements
  to a script that generates the grant permissions

  Revision 1.48  2010/09/07 23:52:46  bruno
  star power for gb

  Revision 1.47  2010/07/31 01:02:02  bruno
  first stab at putting in 'shadow' values in the database that non-root
  and non-apache users can't read

  Revision 1.46  2010/07/08 20:26:58  bruno
  nuke ampersands in the cvs comments

  Revision 1.45  2010/06/30 17:37:32  anoop
  Overhaul of the naming system. We now support
  1. Multiple zone/domains
  2. Serving DNS for multiple domains
  3. No FQDN support for network names
     - FQDN must be split into name and domain.
     - Each piece information will go to a
       different table
  Hopefully, I've covered the basics, and not broken
  anything major

  Revision 1.44  2010/06/15 19:36:51  bruno
  add the public key table

  Revision 1.43  2010/05/20 00:31:44  bruno
  gonna get some serious 'star power' off this commit.

  put in code to dynamically configure the static-routes file based on
  networks (no longer the hardcoded 'eth0').

  Revision 1.42  2010/05/13 22:59:24  bruno
  add firewall tables

  Revision 1.41  2010/04/20 19:33:04  bruno
  more bonding tweaks

  Revision 1.40  2009/06/03 21:28:51  bruno
  add MTU to the subnets table

  Revision 1.39  2009/05/01 19:06:48  mjk
  chimi con queso

  Revision 1.38  2009/04/29 20:12:53  mjk
  don't create cluster DB on OS mysql

  Revision 1.37  2009/04/23 23:46:11  mjk
  new foundation mysql needs --password flag

  Revision 1.36  2009/04/21 23:04:08  mjk
  - start the foundation-mysql DB and put tables there also
  - move sunos stuff out to generic
  - kill phpmyadmin stuff
  - next step is to move to foundation-mysql for the rocks command line
  - original mysql DB is still used and works for now

  Revision 1.35  2009/03/31 00:23:29  anoop
  Merged the remainder of the solaris XML files to the base roll

  Revision 1.34  2009/03/21 22:22:55  bruno
   - lights-out install of VM frontends with new node_rolls table
   - nuked 'site' columns and tables from database
   - worked through some bugs regarding entities

  Revision 1.33  2009/03/13 00:02:59  mjk
  - checkpoint for route commands
  - gateway is dead (now a default route)
  - removed comment rows from schema (let's see what breaks)
  - removed short-name from appliance (let's see what breaks)
  - dbreport static-routes is dead

  Revision 1.32  2009/03/10 21:38:16  mjk
  *_routes tables

  Revision 1.31  2009/02/14 00:04:29  bruno
  there are only three boot states: os, run and install.

  really only two (os = run) but we'll keep 'os' as a legacy state for now.

  Revision 1.30  2009/02/10 20:12:58  mjk
  solaris -> sunos

  Revision 1.29  2009/01/22 19:14:25  mjk
  this time with feeling

  Revision 1.28  2009/01/22 19:12:43  mjk
  os_attributes table

  Revision 1.27  2009/01/14 00:20:55  bruno
  unify the physical node and VM node boot action functionality

  - all bootaction's are global

  - the node table has a 'runaction' (what bootaction should the node do when
    a node normally boots) and an 'installaction (the bootaction for installs).

  - the 'boot' table has an entry for each node and it dictates what the node
    will do on the next boot -- it will look up the runaction in the nodes table
    (for a normal boot) or the installaction in the nodes table (for an install).

  Revision 1.26  2008/12/23 02:31:31  mjk
  added global_attributes (not used yet)

  Revision 1.25  2008/12/20 01:06:14  mjk
  - added appliance_attributes
  - attributes => node_attributes
  - rocks set,list,remove appliance attr
  - eval shell for conds has a special local dictionary that allows
    unresolved variables (attributes) to evaluate to None
  - need to add this to solaris
  - need to move UserDict stuff into pylib and remove cut/paste code
  - need a drink

  Revision 1.24  2008/12/18 18:19:40  mjk
  - Added attributes table
  - Start of per host edge attributes

  Revision 1.23  2008/12/15 22:27:21  bruno
  convert pxeboot and pxeaction tables to boot and bootaction tables.

  this enables merging the pxeaction and vm_profiles tables

  Revision 1.22  2008/10/18 00:55:45  mjk
  copyright 5.1

  Revision 1.21  2008/08/27 02:41:08  anoop
  Very minor changes to the database schema to store os type along
  with appliance. This is mainly to include solaris support for
  a compute appliance

  Revision 1.20  2008/07/23 00:29:54  anoop
  Modified the database to support per-node OS field. This will help
  determine the kind of provisioning for each node

  Modification to insert-ethers, rocks command line, and pylib to
  support the same.

  Revision 1.19  2008/07/22 00:34:40  bruno
  first whack at vlan support

  Revision 1.18  2008/03/06 23:41:30  mjk
  copyright storm on

  Revision 1.17  2008/02/13 01:02:12  anoop
  The rolls table now has the OS column

  Revision 1.16  2008/01/23 19:05:34  bruno
  can now add kernel boot parameters to the running configuration with the rocks
  command line

  Revision 1.15  2007/07/03 18:13:08  phil
  Move the pxe table schema to database-schema

  Revision 1.14  2007/06/23 04:03:18  mjk
  mars hill copyright

  Revision 1.13  2007/06/05 19:50:24  mjk
  fix prev comment

  Revision 1.12  2007/06/05 19:49:20  mjk
  - removed indexes from schema
  - removed unused versions table

  Revision 1.11  2007/05/30 23:27:16  anoop
  Moved the security information that apache uses to log into mysql to the
  database.xml file.
  Schema changed slightly to clean column names

  Main changes are the use of command line tools to manipulate the database
  rather than using sql syntax directly. Still in beta stage.

  Revision 1.10  2007/05/15 01:50:28  anoop
  Small addition to the Networks table to support subnets as opposed to devices.

  Revision 1.9  2007/05/08 23:36:19  anoop
  A new table added to the database schema. This subnet table is going to
  be used to obtain the IP addresses belonging to a certain network defined
  by a subnet

  Revision 1.8  2006/07/03 23:14:39  bruno
  increase size of roll name -- this is useful for restore rolls which contain
  the FQDN as part of the roll name.

  Revision 1.7  2005/09/01 22:41:44  bruno
  i wish i wouldn't have put the comma there -- oh wait, i didn't.
  i wonder who did?

  Revision 1.6  2005/09/01 16:25:51  mjk
  add comment field to networks and routes tables

  Revision 1.5  2005/05/24 21:30:10  fds
  Tweaks

  Revision 1.4  2005/05/23 23:59:21  fds
  Frontend Restore

  Revision 1.3  2005/05/11 06:44:39  phil
  Added an options line to the networks table
  Added explicit fields for all sql inserts

  Revision 1.2  2005/04/28 21:47:24  bruno
  partitioning function updates in order to support itanium.

  itanics need 'parted' as 'sfdisk' only looks at block 0 on a disk and
  itanics put their real partition info in block 1 (this is the GPT partitioning
  scheme)

  Revision 1.1  2005/03/04 01:40:04  mjk
  massive graph cleanup

  Revision 1.1  2005/03/01 00:22:26  mjk
  moved to base roll

  Revision 1.9  2005/02/15 22:58:52  mjk
  dtd is gone

  Revision 1.8  2005/02/14 21:55:01  bruno
  support for phil's phartitioning phun

  Revision 1.7  2005/01/26 21:24:51  mjk
  added Rolls table

  Revision 1.6  2004/10/22 04:51:50  mjk
  added Device to routes tables

  Revision 1.5  2004/10/04 19:02:08  fds
  The proper way to add indexes to database tables. This will speed
  node install processing for large clusters.

  Revision 1.4  2004/08/16 21:55:17  mjk
  Revert back to previous version and remove the optimization.  This would
  have caused virtual IPs to fail.  Optimizations cannot restrict
  functionality.

  Revision 1.3  2004/08/16 21:28:02  fds
  Make an index (hash) on MAC column for faster lookups in large clusters.

  Revision 1.2  2004/04/12 18:19:06  bruno
  kickstart from any network, even if the node has different types of
  network cards

  Revision 1.1  2004/03/08 21:01:23  mjk
  *** empty log message ***

  Revision 1.18  2004/03/04 19:57:50  bruno
  added gateway column to networks table -- it is populated by add-extra-nic
  and ConfigNetworks writes the GATEWAY field into the ifcfg file

  Revision 1.17  2004/02/06 00:43:55  fds
  Schema migration.

  Revision 1.16  2004/02/04 17:39:39  bruno
  on what interface do you want to install?

  Revision 1.15  2004/02/03 20:00:35  mjk
  decolorize

  Revision 1.14  2004/01/30 04:53:42  mjk
  colorize

  Revision 1.13  2003/09/30 22:30:21  fds
  Removed sshkeys, and added pci tables.

  Revision 1.12  2003/08/26 22:44:20  mjk
  - File tag now takes "expr" attribute (command evaluation)
  - Conversion of old code to file tags
  - Added media-server (used to be server)
  - Killed replace-server on the hpc roll
  - Updated Server database membership (now a media-server)
  - Added Public field to the membership table
  - Insert-ethers only allows a subset of memberships (Public ones) to be
    inserted.
  - Added getArch() to Application class
  - Kickstart trinity (kcgi,kpp,kgen) all updated self.arch initial value

  Revision 1.11  2003/07/16 20:10:41  bruno
  changed to new 'file' tag

  Revision 1.10  2003/06/26 02:24:34  fds
  String compares done on TEXT fields are case-insensitive. BLOBs are better.

  Revision 1.9  2003/06/25 21:21:31  fds
  Fixing small things.

  Revision 1.8  2003/06/25 21:01:54  fds
  VARCHAR fields have a max length of 255.

  Revision 1.7  2003/05/29 20:55:19  mjk
  gateway added to kickstart.cgi

  Revision 1.6  2003/04/18 17:16:04  fds
  Fixed primary key problem permenantly.

  Revision 1.5  2003/04/18 15:19:39  mjk
  fixed networks table (thought I already did)

  Revision 1.4  2003/02/11 23:50:20  mjk
  table name are case sensitive

  Revision 1.3  2003/02/11 19:07:04  mjk
  - Pretty format :)
  - Added Routes table (complements Networks table)

  </changelog>

<post>

<file name="/tmp/tables.sql">
<!-- Aliases -->

DROP TABLE IF EXISTS aliases;
CREATE TABLE aliases (
  ID		int(11) NOT NULL auto_increment,
  Node		int(11) NOT NULL default '0',
  Name		varchar(32) default NULL,
  PRIMARY KEY (ID)
) TYPE=MyISAM;


<!-- Attributes -->

DROP TABLE IF EXISTS global_attributes;
CREATE TABLE global_attributes (
  Attr          varchar(128) default NULL,
  Value         text
) TYPE=MyISAM;


DROP TABLE IF EXISTS os_attributes;
CREATE TABLE os_attributes (
  OS		enum('sunos','linux') NOT NULL default 'linux',
  Attr          varchar(128) default NULL,
  Value         text
) TYPE=MyISAM;


DROP TABLE IF EXISTS appliance_attributes;
CREATE TABLE appliance_attributes (
  Appliance     int(11) NOT NULL default '0',
  Attr          varchar(128) default NULL,
  Value         text
) TYPE=MyISAM;


DROP TABLE IF EXISTS node_attributes;
CREATE TABLE node_attributes (
  Node		int(11) NOT NULL default '0',
  Attr		varchar(128) default NULL,
  Value		text
) TYPE=MyISAM;

<!-- Secure Attributes -->

DROP TABLE IF EXISTS sec_global_attributes;
CREATE TABLE sec_global_attributes (
  Attr          varchar(128) default NULL,
  Value         text,
  Enc		varchar(64) default NULL
) TYPE=MyISAM;

DROP TABLE IF EXISTS sec_node_attributes;
CREATE TABLE sec_node_attributes (
  Node		int(11) NOT NULL default '0',
  Attr		varchar(128) default NULL,
  Value		text,
  Enc		varchar(64) default NULL
) TYPE=MyISAM;

<!-- App_Globals -->


DROP TABLE IF EXISTS app_globals;
CREATE TABLE app_globals (
  ID		int(11) NOT NULL auto_increment,
  Membership	int(11) NOT NULL default '0',
  Service	varchar(64) default NULL,
  Component	varchar(64) default NULL,
  Value		text,
  PRIMARY KEY (ID)
) TYPE=MyISAM;


<!-- Appliances -->

DROP TABLE IF EXISTS appliances;
CREATE TABLE appliances (
  ID		int(11) NOT NULL auto_increment,
  Name		varchar(32) NOT NULL default '',
  Graph		varchar(64) NOT NULL default 'default',
  Node		varchar(64) NOT NULL default '',
  OS		set('linux','sunos') NOT NULL default 'linux',
  PRIMARY KEY (ID)
) TYPE=MyISAM;


<!-- Distributions -->

DROP TABLE IF EXISTS distributions;
CREATE TABLE distributions (
  ID		int(11) NOT NULL auto_increment,
  Name		varchar(32) NOT NULL default '',
  OS_Release	varchar(32) NOT NULL default '',
  Lang		varchar(32) NOT NULL default '',
  PRIMARY KEY (ID)
) TYPE=MyISAM;


<!-- Memberships -->

DROP TABLE IF EXISTS memberships;
CREATE TABLE memberships (
  ID		int(11) NOT NULL auto_increment,
  Name		varchar(64) NOT NULL default '',
  Appliance	int(11) default '0',
  Distribution	int(11) default '1',
  Public	enum('yes','no') NOT NULL default 'no',
  PRIMARY KEY (ID)
) TYPE=MyISAM;


<!-- Nodes
 NOT NORMALIZED: Name is a repeat from the networks table. Nodes.name should be
 "networks.name where device='eth0'"
 -->

DROP TABLE IF EXISTS nodes;
CREATE TABLE nodes (
  ID		int(11) NOT NULL auto_increment,
  Name		varchar(128) default NULL,
  Membership	int(11) default '2',
  CPUs		int(11) NOT NULL default '1',
  Rack		int(11) default NULL,
  Rank		int(11) default NULL,
  Arch		varchar(32) default NULL,
  OS		enum('linux', 'sunos') NOT NULL default 'linux',
  RunAction	varchar(64) default 'os',
  InstallAction	varchar(64) default 'install',
  PRIMARY KEY  (ID)
) TYPE=MyISAM;


<!-- Networks -->

DROP TABLE IF EXISTS networks;
CREATE TABLE networks (
  ID		int(11) NOT NULL auto_increment,
  Node		int(11) default NULL,
  MAC		varchar(64) default NULL,
  IP		varchar(32) default NULL,
  Netmask	varchar(32) default NULL,
  Gateway	varchar(32) default NULL,
  Name		varchar(128) default NULL,
  Device	varchar(32) default NULL,
  Subnet	int(11)	default NULL references subnets,
  Module	varchar(128) default NULL,
  VlanID	int(11) default NULL,
  Options	varchar(128) default NULL,
  Channel	varchar(128) default NULL,
  PRIMARY KEY(ID)
) TYPE=MyISAM;


<!-- Subnets Table -->

DROP TABLE IF EXISTS subnets;
CREATE TABLE subnets (
	ID		int(11)	NOT NULL AUTO_INCREMENT,
	name		varchar(32)	UNIQUE NOT NULL,
	dnszone		varchar(64)	UNIQUE NOT NULL ,
	subnet		varchar(32)	NOT NULL,
	netmask		varchar(32)	NOT NULL,
	mtu		int(11)		default '1500',
	servedns	boolean		default false,
	PRIMARY KEY(ID)
) TYPE=MyISAM;

<!--	Meta table consisting of information from
	nodes, networks, subnets table	-->
create view vnet as (select
	n.name as nodename,
	m.name as membership,
	a.name as appliance,
	n.rack, n.rank,
	s.name as subnet, 
	nt.ip, nt.device, nt.module,
	nt.name as hostname,
	s.dnszone as domainname,
	s.netmask, s.mtu from 
	nodes n, networks nt, subnets s,
	memberships m, appliances a where
	n.membership=m.id and m.appliance=a.id
	and nt.node=n.id and nt.subnet=s.id);

<!-- Routes -->

DROP TABLE IF EXISTS global_routes;
CREATE TABLE global_routes (
  Network	varchar(32) NOT NULL default '',
  Netmask	varchar(32) NOT NULL default '',
  Gateway	varchar(32) NOT NULL default '',
  Subnet	int(11)	default NULL references subnets
) TYPE=MyISAM;


DROP TABLE IF EXISTS os_routes;
CREATE TABLE os_routes (
  OS            enum('sunos','linux') NOT NULL default 'linux',
  Network	varchar(32) NOT NULL default '',
  Netmask	varchar(32) NOT NULL default '',
  Gateway	varchar(32) NOT NULL default '',
  Subnet	int(11)	default NULL references subnets
) TYPE=MyISAM;


DROP TABLE IF EXISTS appliance_routes;
CREATE TABLE appliance_routes (
  Appliance     int(11) NOT NULL default '0',
  Network	varchar(32) NOT NULL default '',
  Netmask	varchar(32) NOT NULL default '',
  Gateway	varchar(32) NOT NULL default '',
  Subnet	int(11)	default NULL references subnets
) TYPE=MyISAM;


DROP TABLE IF EXISTS node_routes;
CREATE TABLE node_routes (
  Node		int(11) NOT NULL default '0',
  Network	varchar(32) NOT NULL default '',
  Netmask	varchar(32) NOT NULL default '',
  Gateway	varchar(32) NOT NULL default '',
  Subnet	int(11)	default NULL references subnets
) TYPE=MyISAM;


<!-- Roll.  What Rolls are installed and used by default. -->

DROP TABLE IF EXISTS rolls;
CREATE TABLE rolls (
  ID 		int(11) NOT NULL auto_increment,
  Name		varchar(128) NOT NULL default '',
  Version	varchar(32) NOT NULL default '',
  Arch		varchar(32) NOT NULL default '',
  OS		enum('linux', 'sunos') NOT NULL default 'linux',
  Enabled	enum('yes','no') NOT NULL default 'yes',
  PRIMARY KEY (ID)
) TYPE=MyISAM;


DROP TABLE IF EXISTS node_rolls;
CREATE TABLE node_rolls (
  Node		int(11) NOT NULL default '0',
  RollID	int(11) NOT NULL
) TYPE=MyISAM;


<!-- Partitions. stores all the partitions for all the appliances -->

DROP TABLE IF EXISTS partitions;
CREATE TABLE partitions (
	ID		int(11) NOT NULL auto_increment,
	Node		int(11) NOT NULL default '0',
	Device		varchar(128) NOT NULL default '',
	Mountpoint	varchar(128) NOT NULL default '',
	SectorStart	varchar(128) NOT NULL default '',
	PartitionSize	varchar(128) NOT NULL default '',
	PartitionID	varchar(128) NOT NULL default '',
	FsType		varchar(128) NOT NULL default '',
	PartitionFlags	varchar(128) NOT NULL default '',
	FormatFlags	varchar(128) NOT NULL default '',
	PRIMARY KEY (ID)
) TYPE=MyISAM;


<!-- Boot/Action Tables -->
DROP TABLE IF EXISTS boot;
CREATE TABLE boot (
  ID            int(11) NOT NULL auto_increment,
  Node          int(11) NOT NULL default '0',
  Action        enum ('install', 'os', 'run'),
  PRIMARY KEY (ID)
) TYPE=MyISAM;


DROP TABLE IF EXISTS bootaction;
CREATE TABLE bootaction (
  ID            int(11) NOT NULL auto_increment,
  Action        varchar(256) default NULL,
  Kernel        varchar(256) default NULL,
  Ramdisk       varchar(256) default NULL,
  Args          varchar(1024) default NULL,
  PRIMARY KEY (ID)
) TYPE=MyISAM;


DROP TABLE IF EXISTS bootflags;
CREATE TABLE bootflags (
  ID            int(11) NOT NULL auto_increment,
  Node          int(11) NOT NULL default '0',
  Flags         varchar(256) default NULL,
  PRIMARY KEY (ID)
) TYPE=MyISAM;


<!-- Firewall Tables -->

DROP TABLE IF EXISTS global_firewall;
CREATE TABLE global_firewall (
  InSubnet	int(11)	default NULL references subnets,
  OutSubnet	int(11)	default NULL references subnets,
  Service       varchar(256) default NULL,
  Protocol      varchar(256) default NULL,
  Action        varchar(256) default NULL,
  Chain         varchar(256) default NULL,
  Flags         varchar(256) default NULL,
  Comment       varchar(256) default NULL
) TYPE=MyISAM;


DROP TABLE IF EXISTS os_firewall;
CREATE TABLE os_firewall (
  OS            enum('sunos','linux') NOT NULL default 'linux',
  InSubnet	int(11)	default NULL references subnets,
  OutSubnet	int(11)	default NULL references subnets,
  Service       varchar(256) default NULL,
  Protocol      varchar(256) default NULL,
  Action        varchar(256) default NULL,
  Chain         varchar(256) default NULL,
  Flags         varchar(256) default NULL,
  Comment       varchar(256) default NULL
) TYPE=MyISAM;


DROP TABLE IF EXISTS appliance_firewall;
CREATE TABLE appliance_firewall (
  Appliance     int(11) NOT NULL default '0',
  InSubnet	int(11)	default NULL references subnets,
  OutSubnet	int(11)	default NULL references subnets,
  Service       varchar(256) default NULL,
  Protocol      varchar(256) default NULL,
  Action        varchar(256) default NULL,
  Chain         varchar(256) default NULL,
  Flags         varchar(256) default NULL,
  Comment       varchar(256) default NULL
) TYPE=MyISAM;


DROP TABLE IF EXISTS node_firewall;
CREATE TABLE node_firewall (
  Node		int(11) NOT NULL default '0',
  InSubnet	int(11)	default NULL references subnets,
  OutSubnet	int(11)	default NULL references subnets,
  Service       varchar(256) default NULL,
  Protocol      varchar(256) default NULL,
  Action        varchar(256) default NULL,
  Chain         varchar(256) default NULL,
  Flags         varchar(256) default NULL,
  Comment       varchar(256) default NULL
) TYPE=MyISAM;


DROP TABLE IF EXISTS public_keys;
CREATE TABLE public_keys (
 ID		int(11) NOT NULL auto_increment,
 Node		int(11) NOT NULL default '0',
 Public_Key	varchar(4096) default NULL,
 PRIMARY KEY (ID)
) TYPE=MyISAM;


<!-- ====  Start of new Generic Categories Schema ====
     Will eventually replace  ALL
     [global,os,appliance,host]_[attributes, firewalls,routes] tables
-->

DROP TABLE IF EXISTS `categories`;
CREATE TABLE `categories` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Name` varchar(64) NOT NULL DEFAULT '0',
  `Description` varchar(512) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `NoDuplicateCategories` (`Name`)
); 

<!-- (Category,index) tuples.
      e.g. ('appliance','Login'), or ('host','compute-0-0')
-->
DROP TABLE IF EXISTS `catindex`;
CREATE TABLE `catindex` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Name` varchar(64) NOT NULL DEFAULT '0',
  `Category` int(11) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `UniqueCatindex` (`Name`,`Category`),
  FOREIGN KEY (Category) REFERENCES Categories(ID) ON DELETE CASCADE
);

<!-- Resolutions chains, This is a precedence of categories -->
DROP TABLE IF EXISTS `resolvechain`;
CREATE TABLE `resolvechain` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Name` varchar(64) NOT NULL DEFAULT '0',
  `Category` int(11) NOT NULL,
  `Precedence` int(11) NOT NULL DEFAULT 10,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `UniqueChain` (`Name`,`Category`),
  FOREIGN KEY (Category) REFERENCES Categories(ID) ON DELETE CASCADE
);

<!-- Which category indices has a host selected, 
     e.g. 'global','os','appliance','host' in Rocks 5.4
          but trivially allows an arbitrary set of of selections
-->
DROP TABLE IF EXISTS `hostselections`;
CREATE TABLE `hostselections` (
  `ID`  int(11) NOT NULL AUTO_INCREMENT,
  `Host` int(11) NOT NULL,
  `Category` int(11) NOT NULL,
  `Selection` int(11) NOT NULL,
   PRIMARY KEY(ID),
   UNIQUE KEY `UniqueAttr` (`Host`,`Category`),
   FOREIGN KEY (Host) REFERENCES Catindex(ID) ON DELETE CASCADE,
   FOREIGN KEY (Selection) REFERENCES Catindex(ID) ON DELETE CASCADE,
   FOREIGN KEY (Category) REFERENCES Categories(ID) ON DELETE CASCADE
);

<!-- New Firewalls Table. Schema includes a Rulename (used for
Final ordering of resolved rules, and (category,category index) 
association.
-->
DROP TABLE IF EXISTS `firewalls`;
CREATE TABLE `firewalls` (
	`ID`  int(11) NOT NULL AUTO_INCREMENT,
	`Rulename` varchar(128) NOT NULL, 
	`Rulesrc`  enum('system','custom') NOT NULL default 'custom',
	`InSubnet`  int(11),
	`OutSubnet` int(11),
	`Service` varchar(256),
	`Protocol` varchar(256),
	`Action` varchar(256),
	`Chain` varchar(256),
	`Flags` varchar(256),
	`Comment` varchar(256),
	`Category` int(11) NOT NULL,
	`Catindex` int(11) NOT NULL,
   	PRIMARY KEY(ID),
   	UNIQUE KEY `UniqueFirewallRule` (`Rulename`,`Category`,`Catindex`),
   	FOREIGN KEY (Catindex) REFERENCES Catindex(ID) ON DELETE CASCADE
);

<!-- New Attributes Table, but not used (yet) -->
DROP TABLE IF EXISTS `attributes`;
CREATE TABLE `attributes` (
  `ID`  int(11) NOT NULL AUTO_INCREMENT,
  `Attr` varchar(128) NOT NULL,
  `Value` text,
  `Shadow` text,
  `Category` int(11) NOT NULL,
  `Catindex` int(11) NOT NULL,
   PRIMARY KEY(ID),
   UNIQUE KEY `UniqueAttr` (`Attr`,`Category`,`Catindex`),
   FOREIGN KEY (Catindex) REFERENCES Catindex(ID) ON DELETE CASCADE
);


<!-- View for human readable queries --> 
DROP VIEW IF EXISTS `vcatindex`;
CREATE VIEW `vcatindex` AS SELECT ci.id, cat.name AS category, ci.name AS catindex FROM categories cat, catindex ci WHERE ci.category=cat.id order by category,catindex;

DROP VIEW IF EXISTS `vresolvechain`;
CREATE VIEW `vresolvechain` AS SELECT r.name AS chain, cat.name AS category, precedence FROM resolvechain r, categories cat WHERE r.category=cat.id order by chain,precedence;

DROP VIEW IF EXISTS `vattributes`;
CREATE VIEW `vattributes` AS SELECT a.id, attr, value, shadow, cat.name AS category, ci.name AS catindex FROM attributes a, catindex ci, categories cat WHERE a.catindex=ci.id AND a.category=cat.id order by attr,catindex,category;

DROP VIEW IF EXISTS `vfirewalls`;
CREATE VIEW `vfirewalls` AS SELECT f.ID, f.Rulename, f.Rulesrc, f.InSubnet, f.OutSubnet, f.Service, f.protocol, f.Action, f.Chain, f.Flags, f.Comment,
	cat.name AS category, ci.name AS catindex FROM firewalls f, catindex ci, categories cat WHERE 
	f.catindex=ci.id AND f.category=cat.id ORDER BY f.Rulename,category,catindex;

DROP VIEW IF EXISTS `vhostselections`;

CREATE VIEW `vhostselections` AS SELECT hs.id, si.name AS host, cat.name AS category, ci.name AS selection FROM catindex si, categories cat, hostselections hs JOIN catindex ci ON hs.selection=ci.id WHERE hs.category=cat.id AND hs.host=si.id order by host,category,selection;

<!-- Stored Procedures -->
<!-- Part I: Simple Mapping Functions to make External Queries Readable -->

DROP FUNCTION IF EXISTS mapCategory;
DELIMITER //
CREATE FUNCTION mapCategory(
    catname VARCHAR(128) 
)
RETURNS INT(11) 
BEGIN
	DECLARE myIndex INT;
 	SELECT cat.ID FROM categories cat WHERE cat.Name=catname INTO myIndex;
	RETURN (SELECT IFNULL(myIndex,0));
END //
DELIMITER ; 

DROP FUNCTION IF EXISTS mapCategoryIndex;
DELIMITER //
CREATE FUNCTION mapCategoryIndex(
    categoryName VARCHAR(128),
    categoryIndex VARCHAR(128) 
)
RETURNS INT(11) 
BEGIN
	DECLARE myIndex INT;
	SELECT ci.ID FROM catindex ci JOIN categories cat on ci.category=cat.id WHERE cat.Name=categoryName AND ci.Name=categoryIndex INTO myIndex;
	RETURN (SELECT IFNULL(myIndex,0));
END //
DELIMITER ; 

<!-- Part II: Resolvers.
     resolveattributes - builds a temporary table of resolved attributes for a
     particular host, using a specific resolution chain

     resolvefirewall - builds a temporary table of resolved firewall rules for a
     particular host, using a specific resolution chain
 -->

DROP DATABASE IF EXISTS TEMPTABLES;
CREATE DATABASE TEMPTABLES;

DROP PROCEDURE IF EXISTS resolveattributes;
DELIMITER //
CREATE PROCEDURE resolveattributes(
    hostname VARCHAR(128), 
    chainname VARCHAR(128)
)
SQL SECURITY DEFINER 
COMMENT 'Fully Resolve Attributes for a input host and resolution chain'
BEGIN
    SET @@session.max_error_count=0;
    DROP TABLE IF EXISTS resolved1;
    CREATE TEMPORARY TABLE resolved1 select hostname, chainname as Resolver, attributes.*, r.precedence FROM resolvechain r, catindex ci, attributes JOIN hostselections hs ON hs.category=attributes.category AND hs.selection=attributes.catindex WHERE hs.host=ci.id AND ci.name=hostname AND r.category=hs.category AND r.name=chainname;
    DROP TABLE IF EXISTS resolved2;
    CREATE TEMPORARY TABLE resolved2 select * FROM resolved1;
    DROP TABLE IF EXISTS resolved;
    CREATE TEMPORARY TABLE TEMPTABLES.resolved select r1.*,cat.name AS CategoryName FROM categories cat, resolved1 r1 JOIN ( select Attr, MAX(precedence) AS precedence FROM resolved2 GROUP BY Attr) AS r2 ON r1.Attr=r2.Attr AND r1.precedence=r2.precedence WHERE r1.category=cat.id;
    SET @@session.max_error_count=64;
END //
DELIMITER ; 

DROP PROCEDURE IF EXISTS resolvefirewalls;
DELIMITER //
CREATE PROCEDURE resolvefirewalls(
    hostname VARCHAR(128), 
    chainname VARCHAR(128)
)
SQL SECURITY DEFINER 
COMMENT 'Fully Resolve Firewalls for a input host and resolution chain'
BEGIN
    SET @@session.max_error_count=0;
    DROP TABLE IF EXISTS fresolved1;
    CREATE TEMPORARY TABLE fresolved1 select hostname, chainname as Resolver, f.*, r.precedence FROM resolvechain r, catindex ci, 
	firewalls f JOIN hostselections hs ON hs.category=f.category AND hs.selection=f.catindex 
	WHERE hs.host=ci.id AND ci.name=hostname AND r.category=hs.category AND r.name=chainname;
    DROP TABLE IF EXISTS fresolved2;
    CREATE TEMPORARY TABLE fresolved2 select * FROM fresolved1;
    DROP TABLE IF EXISTS TEMPTABLES.fwresolved;
    CREATE TEMPORARY TABLE TEMPTABLES.fwresolved select r1.*,cat.name AS CategoryName FROM categories cat, fresolved1 r1 JOIN ( select Rulename, MAX(precedence) AS precedence FROM fresolved2 GROUP BY Rulename) AS r2 ON r1.Rulename=r2.Rulename AND r1.precedence=r2.precedence WHERE r1.category=cat.id;
    SET @@session.max_error_count=64;
END //
DELIMITER ; 

</file>
<file name='/tmp/categories.sql'>

INSERT INTO `categories`(`Name`,`Description`) VALUES ('global','Global Defaults');
INSERT INTO `categories`(`Name`,`Description`) VALUES ('os','OS Choice(Linux,Sunos)');
INSERT INTO `categories`(`Name`,`Description`) VALUES ('appliance','Logical Appliances');
INSERT INTO `categories`(`Name`,`Description`) VALUES ('rack','Machine Room Racks');
INSERT INTO `categories`(`Name`,`Description`) VALUES ('host','Hosts - Physical AND Virtual');

INSERT INTO `catindex`(`Name`,`Category`) VALUES('global',mapCategory('global'));
INSERT INTO `catindex`(`Name`,`Category`) VALUES('linux',mapCategory('os'));
INSERT INTO `catindex`(`Name`,`Category`) VALUES('sunos',mapCategory('os'));

INSERT INTO resolvechain(name, category, precedence) VALUES('default',mapCategory('global'), 10);
INSERT INTO resolvechain(name, category, precedence) VALUES('default',mapCategory('os'), 20);
INSERT INTO resolvechain(name, category, precedence) VALUES('default',mapCategory('appliance'), 30);
INSERT INTO resolvechain(name, category, precedence) VALUES('default',mapCategory('rack'), 40);
INSERT INTO resolvechain(name, category, precedence) VALUES('default',mapCategory('host'), 50);

</file>

/opt/rocks/bin/mysqladmin --user=root --password='' create cluster
/opt/rocks/bin/mysql --user=root --password='' cluster &lt; /tmp/tables.sql
/opt/rocks/bin/mysql --user=root --password='' cluster &lt; /tmp/categories.sql

</post>

</kickstart>
