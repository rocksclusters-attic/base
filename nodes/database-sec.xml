<?xml version='1.0' standalone='no' ?>

<kickstart>

<description>
$Id: database-sec.xml,v 1.11 2011/08/26 00:05:50 anoop Exp $
This xml file sets database access permissions
and grants table and procedure privileges to
apache and other users
</description>

<copyright>
</copyright>

<log>
$Log: database-sec.xml,v $
Revision 1.11  2011/08/26 00:05:50  anoop
mknod needs full path to create urandom device

Revision 1.10  2011/08/25 19:31:23  anoop
Revert back to using /root as root directory.
Better to make a symlink on Solaris rather than
changing the entire code base to use / as root directory

Revision 1.9  2011/08/25 00:12:12  anoop
Create urandom device during installation. Otherwise,
random passwords cannot be generated.

Revision 1.8  2011/08/24 19:20:30  anoop
sunos does not have the apache user setup.

Revision 1.7  2011/08/24 06:12:09  anoop
Need rocks-admin package for solaris

Revision 1.6  2011/06/10 19:30:28  anoop
-All grants now moved to rocks-db-perms.py
-Changed ordering so that database-security
 is setup before any database accesses
-Bug fixes

</log>

<!-- Required to run the rocks-db-perms command -->
<package os="linux">rocks-admin</package>
<package os="sunos">ROCKSrocks-admin</package>

<post os="sunos">
<!-- Create apache user on Solaris -->
groupadd -g 425 apache
useradd -u 425 -g apache -s /bin/false -d &HttpRoot; apache

<!--	Create a urandom device in chrooted environment
	This is usually created on first boot, but we need
	it installation -->
/usr/sbin/mknod /devices/pseudo/random\@0\:urandom c 149 1

</post>

<!-- Access control on the database -->
<post interpreter='/opt/rocks/bin/python'>
import os
import sys
import re
import string
import base64

import MySQLdb

# Connect to the database to set security
d = MySQLdb.connect(user='root', db='mysql', passwd='',
	unix_socket='/var/opt/rocks/mysql/mysql.sock')

try:
	db = d.cursor()
except:
	sys.exit(-1)

cmd_set = []

# Password Access for root
root_pass = string.strip(base64.b64encode(os.urandom(16), './')[0:16])
cmd_set.append('set password for "root"@"localhost"=PASSWORD("%s")' % root_pass)
cmd_set.append('set password for "root"@"127.0.0.1"=PASSWORD("%s")' % root_pass)
cmd_set.append('set password for "root"@"&hostname;"=PASSWORD("%s")' % root_pass)

# Add root password access to root MySQL config file
f = open('/root/.rocks.my.cnf', 'w')
f.write('[client]\n')
f.write('password\t= %s\n' % root_pass)
f.close()

# Password Access for the apache
apache_pass = string.strip(base64.b64encode(os.urandom(16), './')[0:16])
cmd_set.append('create user "apache"@"localhost" identified by "%s"' % apache_pass)
cmd_set.append('create user "apache"@"&hostname;" identified by "%s"' % apache_pass)

# Add password to the common MySQL config file
f = open('/opt/rocks/mysql/my.cnf', 'a')
f.write("password\t= %s\n" % apache_pass)
f.close()

for cmd in cmd_set:
	try:
		db.execute(cmd)
	except:
		sys.stderr.write("Could not execute %s\n" % cmd)
</post>

<post>
chown root:apache /opt/rocks/mysql/my.cnf
chmod 0640 /opt/rocks/mysql/my.cnf
chmod 0400 /root/.rocks.my.cnf
</post>

<post>
<!-- Set access controls on database tables -->
/opt/rocks/sbin/rocks-db-perms

<!-- use long passwords in the database -->
<file name="/tmp/my.cnf" expr="grep -v '^old_passwords' /etc/my.cnf"/>
<file name="/etc/my.cnf" perms="644" expr="cat /tmp/my.cnf"/>
rm /tmp/my.cnf

</post>
</kickstart>
