<?xml version="1.0" standalone="no"?>

<kickstart>

  <description>

  Secure Sockets Layer for non-frontend nodes.

  </description>

        <copyright>
        Copyright (c) 2000 - 2014 The Regents of the University of California.
        All rights reserved. Rocks(r) v6.1.1 www.rocksclusters.org
        
        </copyright>

  <changelog>
  $Log: ssl-client.xml,v $
  Revision 1.13  2012/05/06 05:48:10  phil
  Copyright Storm for Mamba

  Revision 1.12  2011/07/23 02:30:15  phil
  Viper Copyright

  Revision 1.11  2010/09/07 23:52:47  bruno
  star power for gb

  Revision 1.10  2009/05/01 19:06:48  mjk
  chimi con queso

  Revision 1.9  2009/03/31 00:23:29  anoop
  Merged the remainder of the solaris XML files to the base roll

  Revision 1.8  2009/01/24 02:04:28  mjk
  - more ROCKDEBUG stuff (now to stderr)
  - os attr commands (still incomplete)
  - fix ssl code

  Revision 1.7  2009/01/23 23:46:50  mjk
  - continue to kill off the var tag
  - can build xml and kickstart files for compute nodes (might even work)

  Revision 1.6  2009/01/23 23:19:31  mjk
  tweaks on the entities

  Revision 1.5  2008/10/18 00:55:46  mjk
  copyright 5.1

  Revision 1.4  2008/03/11 19:07:33  bruno
  ssl certificates moved in RHEL 5

  Revision 1.3  2008/03/06 23:41:30  mjk
  copyright storm on

  Revision 1.2  2007/06/23 04:03:18  mjk
  mars hill copyright

  Revision 1.1  2005/03/01 00:22:26  mjk
  moved to base roll

  Revision 1.3  2005/02/15 22:58:52  mjk
  dtd is gone

  Revision 1.2  2004/08/11 21:37:30  fds
  CN more correct.

  Revision 1.1  2004/08/10 19:05:42  fds
  Moved to new security graph hierarchy.

  </changelog>

<post os='linux'>

<!-- Make a Certificate for Mod_SSL -->
<eval shell="bash" mode="xml">

cert=`mktemp -dq /etc/security/ca/new-certs/cert.XXXXXX`

(
cd /etc/security/ca; \
/usr/bin/openssl req -new -nodes -config ca.cfg \
	-keyout $cert/key \
	-subj "\
/C=&Info_CertificateCountry;/\
ST=&Info_CertificateState;/\
L=&Info_CertificateLocality;/\
O=&Info_CertificateOrganization;/\
OU=&Info_ClusterName;/\
CN=&hostname;.&Kickstart_PrivateDNSDomain;" \
	&gt; $cert/csr 2&gt;/dev/null
)

echo "&lt;file name='/etc/pki/tls/private/localhost.key' perms='0400'&gt;"
cat $cert/key
echo "&lt;/file&gt;"

<!-- Sign the Request with our CA-->
(
cd /etc/security/ca; \
/usr/bin/openssl x509 -req -days 1000 \
	-CA ca.crt -CAkey ca.key -CAserial ca.serial \
	&lt; $cert/csr \
	&gt; $cert/crt 2&gt;/dev/null
)

echo "&lt;file name='/etc/pki/tls/certs/localhost.crt' perms='0444'&gt;"
cat $cert/crt
echo "&lt;/file&gt;"
rm -rf $cert
</eval>
</post>

<post os='sunos'>

<!-- Make a Certificate for Mod_SSL -->
<eval shell="/bin/bash" mode='xml'>

cert=`mktemp -dq /etc/security/ca/new-certs/cert.XXXXXX`

(
cd /etc/security/ca; \
/usr/bin/openssl req -new -nodes -config ca.cfg \
	-keyout $cert/key \
	-subj "\
/C=&Info_CertificateCountry;/\
ST=&Info_CertificateState;/\
L=&Info_CertificateLocality;/\
O=&Info_CertificateOrganization;/\
OU=&Info_ClusterName;/\
CN=&hostname;.&Kickstart_PrivateDNSDomain;" \
	&gt; $cert/csr 2&gt;/dev/null
)

echo "&lt;file name='/etc/sfw/openssl/private/localhost.key' perms='0400'&gt;"
cat $cert/key
echo "&lt;/file&gt;"

<!-- Sign the Request with our CA-->
(
cd /etc/security/ca; \
/usr/bin/openssl x509 -req -days 1000 \
	-CA ca.crt -CAkey ca.key -CAserial ca.serial \
	&lt; $cert/csr \
	&gt; $cert/crt 2&gt;/dev/null
)

echo "&lt;file name='/etc/sfw/openssl/certs/localhost.crt' perms='0444'&gt;"
cat $cert/crt
echo "&lt;/file&gt;"
rm -rf $cert
</eval>
</post>

</kickstart> 
